/* eslint-env browser */
import React from "react";
import ReactDOM from "react-dom";
import "./index.css"

import Title from "./components/Title";
import SubTitle from "./components/SubTitle";
import SubSubTitle from "./components/SubTitle";
import Prerequisites from "./components/Prerequisites";
import Note from "./components/Note";
import Code from "./components/Code";
import Paragraph from "./components/Paragraph";
import WorkflowLive from "./components/WorkflowLive";

const githubUrl = "https://github.com/havardh/workflow/tree/master/packages";

function c([value]) {
  return (<span>&nbsp;<span className="inline-code">{value}</span>&nbsp;</span>);
}

function m([value]) {
  return (
    <span>
      &nbsp;
      <span className="inline-code">
        <a href={`${githubUrl}/${value}`}>{value}</a>
      </span>
      &nbsp;
    </span>
  );
}

const Application = () => (
  <div className="content">
    <Title>The Workflow guide</Title>

    <Paragraph>
      Workflow is a declarative workspace manager. It lets you define your
      layouts in a configurable format. These are called {c`flows`}. Workflow
      will apply these {c`flows`} by interacting with the native windows manager
      on your system. Below is an example of a split view between a text editor
      and a terminal. The {c`flow`} file is shown on the left and the resulting
      desktop layout is shown on the right.
    </Paragraph>
    <Paragraph>
      The examples on this page
      is rendered using the {m`workflow-wm-html`} windows manager. It
      is used for demonstrational purposes to test out {c`workflow`} in a browser.
    </Paragraph>
    <WorkflowLive name={"WorkflowDev"} />

    <Paragraph>
      The {c`flow`} above is written in {c`React`} using the {c`workflow-react`}
      package. This is an optional, but convenient, frontend for
      writing {c`workflow`} flows. Below is the same example written without
      using {m`workflow-react`}.
    </Paragraph>
    <WorkflowLive name={"WorkflowDevCore"} />

    <SubTitle>Installation</SubTitle>
    <Paragraph>
      There are a number of ways of installing {c`workflow`}. These range form
      easy to get started with, to flexible and configurable.
    </Paragraph>
    <SubSubTitle>
      1. Downloading a platform dependent binary
    </SubSubTitle>
    <Paragraph>
      <Note>this feature is planned, not implemented.</Note>

      Builds of {c`workflow`} are available as generated by {c`pkg`}.
      This is the recommended way of installing {c`workflow`} if you are not
      familiar with {c`node`} and {c`npm`}.

      <ul>
        <li>windows-X.X.X.tar.gz</li>
        <li>osx-X.X.X.tar.gz</li>
        <li>linux-i3-X.X.X.tar.gz</li>
        <li>linux-wmctl-X.X.X.tar.gz</li>
      </ul>
    </Paragraph>

    <SubSubTitle>
      2. Using {c`npx`}
    </SubSubTitle>
    <Paragraph>
      <Note> this feature is planned, but not tested.</Note>

      <Prerequisites prerequisites={["node / npm>5.2.0"]}/>

      {c`npx`} will install any missing binaries temporarly
      and execute the command. When the program is done the binary
      will be removed. This is a way to try out {c`workflow`} once and
      can only be tested out with the examples contained within the
      {c`workflow-cmd`} package.

      <Code>
         {'>'} npx workflow-cmd Example
      </Code>
    </Paragraph>

    <SubSubTitle>
      3. Installing with {c`npm`}
    </SubSubTitle>
    <Paragraph>

      <Prerequisites prerequisites={[
        "node > 8",
        "windows-build-tools for windows users"
      ]}/>

      This is the recommended way of installing {c`workflow`} if you are
      familiar with {c`node`} and {c`npm`}. It will install the {c`workflow`}
      command on your path, and create the {c`~/.workflow`} home folder.

      <Code>
        {'>'} npm install --global workflow-cmd
      </Code>
    </Paragraph>

    <SubSubTitle>
      3. Building from source
    </SubSubTitle>
    <Paragraph>

      <Prerequisites prerequisites={[
        "node > 8",
        "git",
        "windows-build-tools for windows users"
      ]}/>

      {c`workflow`} is open source and available for download at github.com.
      This method is meant for developers who want to get involved and
      contribute to {c`workflow`}.

      <Code>
         {'>'} git clone https://github.com/havardh/workflow <br />
         {'>'} cd workflow <br />
         {'>'} yarn
      </Code>
    </Paragraph>

    <SubTitle>Usage</SubTitle>

    <Paragraph>

      When installing {c`workflow`} you will get a folder in your home folder
      called {c`.workflow`}. Inside of this folder are configurations for the
      {c`workflow`} command. It is the recommended location to add any addition
      like personal {c`flows`} to this folder under {c`~/workflow/flows`}. The
      {c`workflow`} command will resolve all files located this folder by name.
      The following command will apply the {c`ReactExample`} which is bundled
      with {c`workflow-cmd`}.

      <Code>
        {'>'} workflow ReactExample
      </Code>
    </Paragraph>

    <SubTitle>Concepts</SubTitle>
    <Paragraph>
      {c`workflow`} has three basic concepts. {c`workspaces`}, {c`layouts`}, and
      {c`apps`}. A {c`workspace`} is the top level container which represents
      the entire desktop surface of a screen. A {c`layout`} is a mid level
      container which tells {c`workflow`} how to place {c`apps`} on the screen.
      An {c`app`} represents a concrete Application that the user intents too
      see on the screen.
    </Paragraph>

    <SubSubTitle>Workspace</SubSubTitle>
    <Paragraph>
      The workspace container is only used as the root in a {c`flow`}. It
      defines the name of the workspace and the list of command line arguments
      for the flow.
    </Paragraph>

      <Code>{`const workspace = {
  name: string // name of the flow
  args: Array<string> | string // name of command line arguments
};`}
      </Code>

    <Paragraph>
      Lets look at a simple usage of the args parameter.
    </Paragraph>

    <WorkflowLive
      args={["/home/user/dev/app/index.html"]}
      name={"WorkflowFileArgument"}
    />

    <SubTitle>Configuration</SubTitle>

    <Paragraph>
      Workflow is configured through the workflow home folder.
      This folder is by default located at {c`~/.workflow`}. The content of this
      folder is documented in the readme of {m`workflow-template`}. This section
      describes the most notable files.
    </Paragraph>

    <SubSubTitle>The {c`config.js`} file</SubSubTitle>
    <Paragraph>
      The {c`config.js`} file is the file responsible for configuring how
      {c`workflow`} resolves, loads, transforms and applies the {c`flows`}.
      As you can see from the annotated example below, {c`workflow`} it self
      is built to be extentable through supported and third-party modules.

      </Paragraph>
    <Code>
{`// file: ~/.workflow/config.js
import {resolve} from "path";
import WorkflowResolverRelative from "workflow-resolver-relative";
import WorkflowResolverAbsolute from "workflow-resolver-absolute";
import WorkflowLoaderBabel from "workflow-loader-babel";
import WorkflowTranformAnalytics from "workflow-transform-analytics";
import WorkflowWmOsx from "workflow-wm-osx";

/*  */
export default {

  /* Resolves lets workflow know where to look for flow files. */
  resolvers: [
    /* Resolves flows with an absolute path */
    new WorkflowResolverAbsolute()
    /* Resolves flows relative to the workflow home folder */
    new WorkflowResolverRelative({path: resolve("flows")}),
  ],

  /* Loads the flow specified as the first command line argument */
  loader: new WorkflowLoaderBabel(),

  /*  */
  transforms: [
    new WorkflowTranformerApplyArgumentsToFields()
  ],
  wm: new WorkflowWmOsx();
};
`}
    </Code>
  </div>
);

ReactDOM.render(<Application />, document.getElementById("app"))
